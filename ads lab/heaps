#include <bits/stdc++.h>
using namespace std;
class Heap{
    public:
    int* arr;
    int size;
    int capacity;
    Heap(int capacity){
        this->capacity=capacity;
        size=0;
        arr=new int[capacity];
    }
    void insert(int ele){
        if(capacity==size){
            cout<<"heap overflowed"<<endl;
            return;
        }
        arr[size]=ele;
        int i=size;
        size++;
        int parent=(i-1)/2;
        while(i>=0&&parent>=0&&arr[parent]<arr[i]){
            swap(arr[parent],arr[i]);
            i=parent;
            parent=(i-1)/2;
        }
    }
    void heapify(int arr[],int ind,int n){
        int largest=ind;
        int left=2*ind+1;
        int right=2*ind+2;
        if(left<n&&arr[left]>arr[largest]){
            largest=left;
        }
        if(right<n&&arr[right]>arr[largest]){
            largest=right;
        }
        if(ind!=largest){
            swap(arr[largest],arr[ind]);
            heapify(arr,largest,n);
        }
    }
    void del(){
        if(size==0) cout<<"no elements to remove"<<endl;
        arr[0]=arr[size-1];
        size--;
        if(size==0) return;
        heapify(arr,0,size);
    }
    void buildHeap(int a[],int n){
        for(int i=(n/2)-1;i>=0;i--){
            heapify(a,i,n);
        }
    }
    void heapSort(int a[],int n){
        buildHeap(a,n);
        for(int i=n;i>=1;i--){
            swap(arr[0],arr[i-1]);
            heapify(a,0,i);
        }
        
        
    }
    
};
int main(){
    Heap h1(6);
    h1.insert(10);
    h1.insert(2);
    h1.insert(3);
    h1.insert(99);
    h1.insert(21);
    for(int i=0;i<h1.size;i++){
        cout<<h1.arr[i]<<" ";
    }
    int arrr[]={23,2,99,25,9};
    int n=5;
    
    h1.buildHeap(arrr,n);
    for(int i=0;i<5;i++){
        cout<<arrr[i]<<" ";
    }
    
    return 0;
}
